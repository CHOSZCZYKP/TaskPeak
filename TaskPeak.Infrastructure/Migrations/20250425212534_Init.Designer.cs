// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskPeak.Infrastructure.Data;

#nullable disable

namespace TaskPeak.Infrastructure.Migrations
{
    [DbContext(typeof(TaskPeakDbContext))]
    [Migration("20250425212534_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.DziennyRaport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdPracownika")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("IloscGodzin")
                        .HasColumnType("real");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IdPracownika");

                    b.ToTable("DzienneRaporty");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Faktura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataWykonaniaUslugi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataWystawienia")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdKlienta")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MetodaPlatnosci")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NrFaktury")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("TerminPlatnosci")
                        .HasColumnType("datetime2");

                    b.Property<string>("Uwagi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdKlienta");

                    b.ToTable("Faktury");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Klient", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataRejestracji")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firma")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NIP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Klienci");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Opinia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdKlienta")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("IloscGwiazdek")
                        .HasColumnType("real");

                    b.Property<string>("Tresc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IdKlienta");

                    b.ToTable("Opinie");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.PozycjaFaktury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdFaktury")
                        .HasColumnType("int");

                    b.Property<int>("IdUslugi")
                        .HasColumnType("int");

                    b.Property<int>("Ilosc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdFaktury");

                    b.HasIndex("IdUslugi");

                    b.ToTable("PozycjeFaktura");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Pracownik", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataZatrudnienia")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Pracownicy");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Rezerwacja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataRezerwacji")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdKlienta")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdUslugi")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("IdKlienta");

                    b.HasIndex("IdUslugi");

                    b.ToTable("Rezerwacje");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Urlop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataKoncowa")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPoczatkowa")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdPracownika")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdPracownika");

                    b.ToTable("Urlopy");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Usluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("StawkaVat")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("Id");

                    b.ToTable("Uslugi");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Zadanie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataPrzydzielenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdPracownika")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdRezerwacji")
                        .HasColumnType("int");

                    b.Property<string>("OpisZadania")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("IdPracownika");

                    b.HasIndex("IdRezerwacji");

                    b.ToTable("Zadania");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Zgloszenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdKlienta")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdKlienta");

                    b.ToTable("Zgloszenia");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Uzytkownik", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasDiscriminator().HasValue("Uzytkownik");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.DziennyRaport", b =>
                {
                    b.HasOne("TaskPeak.Domain.Entities.Pracownik", "Pracownik")
                        .WithMany("DzienneRaporty")
                        .HasForeignKey("IdPracownika")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pracownik");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Faktura", b =>
                {
                    b.HasOne("TaskPeak.Domain.Entities.Klient", "Klient")
                        .WithMany("Faktury")
                        .HasForeignKey("IdKlienta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TaskPeak.Domain.Entities.Waluta", "KwotaBrutto", b1 =>
                        {
                            b1.Property<int>("FakturaId")
                                .HasColumnType("int");

                            b1.Property<string>("Nazwa")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<decimal>("Wartosc")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal(10,2)");

                            b1.HasKey("FakturaId");

                            b1.ToTable("Faktury");

                            b1.WithOwner()
                                .HasForeignKey("FakturaId");
                        });

                    b.OwnsOne("TaskPeak.Domain.Entities.Waluta", "KwotaNetto", b1 =>
                        {
                            b1.Property<int>("FakturaId")
                                .HasColumnType("int");

                            b1.Property<string>("Nazwa")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<decimal>("Wartosc")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal(10,2)");

                            b1.HasKey("FakturaId");

                            b1.ToTable("Faktury");

                            b1.WithOwner()
                                .HasForeignKey("FakturaId");
                        });

                    b.Navigation("Klient");

                    b.Navigation("KwotaBrutto")
                        .IsRequired();

                    b.Navigation("KwotaNetto")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Klient", b =>
                {
                    b.OwnsOne("TaskPeak.Domain.Entities.Adres", "Adres", b1 =>
                        {
                            b1.Property<string>("KlientId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("KodPocztowy")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)");

                            b1.Property<string>("Miasto")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("NrDomu_Lokalu")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Ulica")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("KlientId");

                            b1.ToTable("Klienci");

                            b1.WithOwner()
                                .HasForeignKey("KlientId");
                        });

                    b.Navigation("Adres")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Opinia", b =>
                {
                    b.HasOne("TaskPeak.Domain.Entities.Klient", "Klient")
                        .WithMany("Opinie")
                        .HasForeignKey("IdKlienta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klient");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.PozycjaFaktury", b =>
                {
                    b.HasOne("TaskPeak.Domain.Entities.Faktura", "Faktura")
                        .WithMany("PozycjeFaktury")
                        .HasForeignKey("IdFaktury")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskPeak.Domain.Entities.Usluga", "Usluga")
                        .WithMany("PozycjeFaktur")
                        .HasForeignKey("IdUslugi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TaskPeak.Domain.Entities.Waluta", "CenaBrutto", b1 =>
                        {
                            b1.Property<int>("PozycjaFakturyId")
                                .HasColumnType("int");

                            b1.Property<string>("Nazwa")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<decimal>("Wartosc")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal(10,2)");

                            b1.HasKey("PozycjaFakturyId");

                            b1.ToTable("PozycjeFaktura");

                            b1.WithOwner()
                                .HasForeignKey("PozycjaFakturyId");
                        });

                    b.OwnsOne("TaskPeak.Domain.Entities.Waluta", "CenaNetto", b1 =>
                        {
                            b1.Property<int>("PozycjaFakturyId")
                                .HasColumnType("int");

                            b1.Property<string>("Nazwa")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<decimal>("Wartosc")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal(10,2)");

                            b1.HasKey("PozycjaFakturyId");

                            b1.ToTable("PozycjeFaktura");

                            b1.WithOwner()
                                .HasForeignKey("PozycjaFakturyId");
                        });

                    b.Navigation("CenaBrutto")
                        .IsRequired();

                    b.Navigation("CenaNetto")
                        .IsRequired();

                    b.Navigation("Faktura");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Pracownik", b =>
                {
                    b.OwnsOne("TaskPeak.Domain.Entities.Waluta", "StawkaZaGodz", b1 =>
                        {
                            b1.Property<string>("PracownikId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Nazwa")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<decimal>("Wartosc")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal(10,2)");

                            b1.HasKey("PracownikId");

                            b1.ToTable("Pracownicy");

                            b1.WithOwner()
                                .HasForeignKey("PracownikId");
                        });

                    b.Navigation("StawkaZaGodz")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Rezerwacja", b =>
                {
                    b.HasOne("TaskPeak.Domain.Entities.Klient", "Klient")
                        .WithMany("Rezerwacje")
                        .HasForeignKey("IdKlienta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskPeak.Domain.Entities.Usluga", "Usluga")
                        .WithMany("Rezerwacje")
                        .HasForeignKey("IdUslugi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klient");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Urlop", b =>
                {
                    b.HasOne("TaskPeak.Domain.Entities.Pracownik", "Pracownik")
                        .WithMany("Urlopy")
                        .HasForeignKey("IdPracownika")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pracownik");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Usluga", b =>
                {
                    b.OwnsOne("TaskPeak.Domain.Entities.Waluta", "CenaNetto", b1 =>
                        {
                            b1.Property<int>("UslugaId")
                                .HasColumnType("int");

                            b1.Property<string>("Nazwa")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<decimal>("Wartosc")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal(10,2)");

                            b1.HasKey("UslugaId");

                            b1.ToTable("Uslugi");

                            b1.WithOwner()
                                .HasForeignKey("UslugaId");
                        });

                    b.Navigation("CenaNetto")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Zadanie", b =>
                {
                    b.HasOne("TaskPeak.Domain.Entities.Pracownik", "Pracownik")
                        .WithMany("Zadania")
                        .HasForeignKey("IdPracownika")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskPeak.Domain.Entities.Rezerwacja", "Rezerwacja")
                        .WithMany("Zadania")
                        .HasForeignKey("IdRezerwacji")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pracownik");

                    b.Navigation("Rezerwacja");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Zgloszenie", b =>
                {
                    b.HasOne("TaskPeak.Domain.Entities.Klient", "Klient")
                        .WithMany("Zgloszenia")
                        .HasForeignKey("IdKlienta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klient");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Uzytkownik", b =>
                {
                    b.HasOne("TaskPeak.Domain.Entities.Klient", "Klient")
                        .WithOne("Uzytkownik")
                        .HasForeignKey("TaskPeak.Domain.Entities.Uzytkownik", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskPeak.Domain.Entities.Pracownik", "Pracownik")
                        .WithOne("Uzytkownik")
                        .HasForeignKey("TaskPeak.Domain.Entities.Uzytkownik", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klient");

                    b.Navigation("Pracownik");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Faktura", b =>
                {
                    b.Navigation("PozycjeFaktury");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Klient", b =>
                {
                    b.Navigation("Faktury");

                    b.Navigation("Opinie");

                    b.Navigation("Rezerwacje");

                    b.Navigation("Uzytkownik")
                        .IsRequired();

                    b.Navigation("Zgloszenia");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Pracownik", b =>
                {
                    b.Navigation("DzienneRaporty");

                    b.Navigation("Urlopy");

                    b.Navigation("Uzytkownik")
                        .IsRequired();

                    b.Navigation("Zadania");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Rezerwacja", b =>
                {
                    b.Navigation("Zadania");
                });

            modelBuilder.Entity("TaskPeak.Domain.Entities.Usluga", b =>
                {
                    b.Navigation("PozycjeFaktur");

                    b.Navigation("Rezerwacje");
                });
#pragma warning restore 612, 618
        }
    }
}
